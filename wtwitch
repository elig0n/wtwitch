#!/bin/bash
#
# Description: Browse and watch Twitch without being tracked.
#
# Homepage: https://gitlab.com/krathalan
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# ------------------
# --- Guidelines ---
# ------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# This script spawns subshell processes (see check_twitch_streams function)
trap "kill 0" SIGINT

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------
# ----- Program variables -----
# -----------------------------

# Colors
readonly RED="\033[1;31m"
readonly ORANGE="\033[0;33m"
readonly TURQOISE="\033[0;36m"
readonly NC="\033[0m" # No Color

readonly TWITCH_JSON="/tmp/twitch.json"
readonly STREAM_TEXT_FILE="/tmp/.stream.txt"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Checks to see which favorite Twitch streams are online.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
check_twitch_streams()
{
	local -r streamsToCheck=("a_seagull" "agilities" "asmongold" "aspen" "bobross" "custa" "drjayfisto" "emongg" "jdotb" "overwatchleague" "preachlfw")

	echo -en "\n Streams online:"

	for stream in "${streamsToCheck[@]}"; do
		(check_twitch_streams_helper "${stream}") &
	done

	wait
	
	echo ""

	sort "${STREAM_TEXT_FILE}" 2> /dev/null
}

#######################################
# Used by check_twitch_streams to facilitate multi-process
# fetching and parsing of Twitch json files.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
check_twitch_streams_helper()
{
	# Get current info of streamer
	local -r streamerJSON="/tmp/twitch-$1.json"
	rm -f "/tmp/twitch-$1.json"
	curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/kraken/streams/$1" > "${streamerJSON}"

	local streamType
	streamType=$(jq -r ".stream.stream_type" "${streamerJSON}")

	# Check if stream is online 
	if [[ "${streamType}" != "null" ]]; then
		local -r playingGame=$(jq -r ".stream.game" "${streamerJSON}")

		local streamName
		streamName=$(jq -r ".stream.channel.status" "${streamerJSON}")

		# Truncate stream name if necessary; some streamers have excessively long stream titles
		local streamNameLength=${#streamName}

		if [[ "${streamNameLength}" -gt 50 ]]; then
			streamName=$(echo "${streamName}" | cut -c 1-50)
			streamName="${streamName}…"
		fi

		if [[ "${streamType}" == "live" ]]; then
			streamType=""
		else
			streamType=", ${RED}${streamType}${NC}"
		fi

		echo -e "   ${TURQOISE}$1${NC}: ${streamName} ${ORANGE}(playing ${playingGame}${streamType}${ORANGE})${NC}" >> "${STREAM_TEXT_FILE}"
	fi
}

clean_up()
{
	# Clean up
	rm -f /tmp/twitch*
	rm -f "${STREAM_TEXT_FILE}"
}

list_streamers_of_game()
{
	# Get game_id
	curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/helix/games?name=$1" > "${TWITCH_JSON}"

	local gameID
	gameID=$(jq -r ".data[0].id" "${TWITCH_JSON}")

	# Get streamers
	curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/helix/streams?game_id=${gameID}" > "${TWITCH_JSON}"

	local streamerName=""
	streamerName=$(jq -r ".data[0].user_name" "${TWITCH_JSON}")

	local streamTitle=""
	streamTitle=$(jq -r ".data[0].title" "${TWITCH_JSON}")

	local viewers=""
	viewers=$(jq -r ".data[0].viewer_count" "${TWITCH_JSON}")

	local streamTitleLength

	echo -e "\n $1 streamers:"

	local whileCounter=1;
	while [[ "${streamerName}" != "null" ]]; do
		# Truncate title if necessary
		streamTitleLength=${#streamTitle}

		if [[ "${streamTitleLength}" -gt 50 ]]; then
			streamTitle=$(echo "${streamTitle}" | cut -c 1-50)
			streamTitle="${streamTitle}…"
		fi

		echo -e "   ${TURQOISE}${streamerName}${NC}: ${streamTitle} ${ORANGE}(${viewers} viewers)${NC}"

		# Refresh data
		streamerName=$(jq -r ".data[${whileCounter}].user_name" "${TWITCH_JSON}")
		streamTitle=$(jq -r ".data[${whileCounter}].title" "${TWITCH_JSON}")
		viewers=$(jq -r ".data[${whileCounter}].viewer_count" "${TWITCH_JSON}")
		whileCounter=$(( whileCounter + 1 ))
	done
}

#######################################
# Lists the top 20 games on Twitch.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
list_top_games()
{
	# Get current top games
	curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/helix/games/top" > "${TWITCH_JSON}"

	# Get first game name. While loop uses the game name to list every game in the json file. Number of games given by
	# the Twitch API is variable, so we should account for that and list every game in the file; not just "top 10 games"
	# or whatever arbitrary number. 

	local gameName=""
	gameName=$(jq -r ".data[0].name" "${TWITCH_JSON}")

	echo -e "\n Top games:"

	local whileCounter=1;
	while [[ "${gameName}" != "null" ]]; do
		echo -e "   ${whileCounter}. ${TURQOISE}${gameName}${NC}"

		# Refresh data
		gameName=$(jq -r ".data[${whileCounter}].name" "${TWITCH_JSON}")
		whileCounter=$(( whileCounter + 1 ))
	done
}

# --------------------------------------
# --------------- Script ---------------
# --------------------------------------

# Parse flags. From:
# https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/7069755#7069755
while test $# -gt 0; do
	case "$1" in
		-c|--check)
			check_twitch_streams
			clean_up
			exit 0
			break
			;;
		-g)
			shift
			if test $# -gt 0; then
				list_streamers_of_game "$1"
				clean_up
				exit 0
			else
				echo "Error: No game specified"
				exit 1
			fi
			break
			;;
		--get-streamers*)
			shift
			gameToCheck=$(echo "$1" | sed -e 's/^[^=]*=//g')
			list_streamers_of_game "${gameToCheck}"
			exit 0
			break
			;;
		-l|--list-games)
			list_top_games
			clean_up
			exit 0
			break
			;;
		*)
			break
			;;
	esac
done

(streamlink --player-continuous-http -p gnome-mpv --twitch-disable-ads "https://www.twitch.tv/$1" best > /dev/null) & 