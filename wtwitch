#!/bin/bash
#
# Description: Browse and watch Twitch without being tracked.
#
# Homepage: https://gitlab.com/krathalan
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# ------------------
# --- Guidelines ---
# ------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# This script spawns subshell processes (see check_twitch_streams function)
trap "kill 0" SIGINT

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly GREEN="\033[1;32m"
readonly RED="\033[1;31m"
readonly ORANGE="\033[0;33m"
readonly TURQOISE="\033[0;36m"
readonly NC="\033[0m" # No Color

readonly CHECK_MARK="${GREEN}\u2714${NC}"
readonly CONFIG_FILE_DIRECTORY="${HOME}/.config/wtwitch"
readonly CONFIG_FILE="${CONFIG_FILE_DIRECTORY}/config.json"
readonly SCRIPT_NAME=$(basename "$0")
readonly STREAM_OFFLINE_TEXT_FILE="/tmp/.stream_offline.txt"
readonly STREAM_ONLINE_TEXT_FILE="/tmp/.stream_online.txt"
readonly TWITCH_JSON="/tmp/twitch.json"

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

# Values are loaded from ~/.config/wtwitch/config.json
userPlayer=""
userQuality=""
userSubscriptions=()

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Changes the default player in ~/.config/wtwitch/config.json that 
# gets passed to streamlink.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
change_player()
{
  # Convert to lowercase
  local -r playerName="${1,,}"
  local -r workingPlayers=("gnome-mpv" "mpv" "mplayer" "vlc")
  local passedCheckMarker="false"

  if [[ ! -x "$(command -v "${playerName}")" ]]; then
    exit_script_on_failure "Media player ${playerName} not installed."
  fi

  # Check against known working players
  for i in "${workingPlayers[@]}"; do
    if [[ "${playerName}" == "${i}" ]]; then
      passedCheckMarker="true"
    fi
  done

  if [[ "${passedCheckMarker}" != "true" ]]; then
    echo -e "\n ${ORANGE}Warning${NC}: player ${playerName} may not work properly with Streamlink."
  fi

  local -r tempJson=$(jq ".player = \"${playerName}\"" "${CONFIG_FILE}")
  echo "${tempJson}" > "${CONFIG_FILE}"
  echo -e "\n ${CHECK_MARK} Successfully changed default player to ${playerName}."
}

change_quality()
{
  # Convert to lowercase
  local -r specifiedQuality="${1,,}"
  local -r acceptableQualities=("worst" "160p" "360p" "480p" "720p" "720p60" "1080p60" "best")
  local passedCheckMarkerArray=()

  # User may try and enter fallback qualities; we should account for this
  IFS=',' read -r -a qualityArray <<< "$specifiedQuality"

  # For each quality the user has specified
  for i in "${qualityArray[@]}"; do
    # Check to make sure it's an acceptable quality
    for j in "${acceptableQualities[@]}"; do
      if [[ "${i}" == "${j}" ]]; then
        passedCheckMarkerArray+=("true")
      fi
    done
  done

  # Make sure there are an equal number of "true" elements in passedCheckMarkers as there are qualities in specifiedQuality
  if [[ ${#qualityArray[@]} -eq ${#passedCheckMarkerArray[@]} ]]; then
    local -r tempJson=$(jq ".quality = \"${specifiedQuality}\"" "${CONFIG_FILE}")
    echo "${tempJson}" > "${CONFIG_FILE}"
    echo -e "\n ${CHECK_MARK} Successfully changed default quality to ${specifiedQuality}."
  else
    exit_script_on_failure "Quality ${specifiedQuality} is not an acceptable quality.\n Acceptable qualities: worst, 160p, 360p, 480p, 720p, 720p60, 1080p60, best."
  fi
}

#######################################
# Checks to see if a specified command is available.
# Globals:
#   none
# Arguments:
#   $1: command to test
# Returns:
#   none
#######################################
check_command()
{
  if [[ ! -x "$(command -v "$1")" ]]; then
        exit_script_on_failure "Package $1 not installed. Install with apt or dnf.\n More information: https://gitlab.com/krathalan/wtwitch#dependencies"
  fi
}

#######################################
# Checks to see which subscribed Twitch streams are online.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
check_twitch_streams()
{
  # Check to make sure there is at least 1 subscription
  local -r subscriptionArrayLength=$(jq ".subscriptions | length" "${CONFIG_FILE}")

  if [[ ${subscriptionArrayLength} -eq 0 ]]; then
    exit_script_on_failure "No subscriptions to check the status of. Use \"wtwitch -s [STREAMER]\" to subscribe to a streamer."
  fi

  echo -en "\n Streamers online:"

  for stream in "${userSubscriptions[@]}"; do
    (check_twitch_streams_helper "${stream}") &
  done

  wait
  
  echo ""

  if [[ -f "${STREAM_ONLINE_TEXT_FILE}" ]]; then
    sort "${STREAM_ONLINE_TEXT_FILE}" 2> /dev/null
  fi

  echo -e "\n Streamers offline:"

  if [[ -f "${STREAM_OFFLINE_TEXT_FILE}" ]]; then
    sort "${STREAM_OFFLINE_TEXT_FILE}" 2> /dev/null
  fi
}

#######################################
# Used by check_twitch_streams to facilitate multi-process
# fetching and parsing of Twitch json files.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
check_twitch_streams_helper()
{
  # Get current info of streamer
  local -r streamerJson=$(curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/kraken/streams/$1")

  local streamType
  streamType=$(jq -r ".stream.stream_type" <<< "${streamerJson}")

  # Check if stream is online 
  if [[ "${streamType}" != "null" ]]; then
    local -r playingGame=$(jq -r ".stream.game" <<< "${streamerJson}")

    local streamName
    streamName=$(jq -r ".stream.channel.status" <<< "${streamerJson}")

    # Truncate stream name if necessary; some streamers have excessively long stream titles
    local streamNameLength=${#streamName}

    if [[ "${streamNameLength}" -gt 50 ]]; then
      streamName=$(echo "${streamName}" | cut -c 1-50)
      streamName="${streamName}…"
    fi

    if [[ "${streamType}" == "live" ]]; then
      streamType=""
    else
      streamType=", ${RED}${streamType}${NC}"
    fi

    echo -e "   ${TURQOISE}$1${NC}: ${streamName} ${ORANGE}(playing ${playingGame}${streamType}${ORANGE})${NC}" >> "${STREAM_ONLINE_TEXT_FILE}"
  else
    echo -e "   ${TURQOISE}$1${NC}" >> "${STREAM_OFFLINE_TEXT_FILE}"
  fi
}

#######################################
# Cleans up temporary file(s).
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
clean_up()
{
  # Clean up
  rm -f "${STREAM_ONLINE_TEXT_FILE}"
  rm -f "${STREAM_OFFLINE_TEXT_FILE}"
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() {
  echo -e "\n ${RED}Error${NC}: $1" >&2
  echo -e " Exiting ${SCRIPT_NAME} Bash script." >&2
  
  clean_up
  exit 1
}

#######################################
# Lists the top streamers for a specified game.
# Globals:
#   none
# Arguments:
#   $1: game to list top streamers of
# Returns:
#   none
#######################################
list_streamers_of_game()
{
  # Replace spaces in game name with %20
  local -r gameName=${1// /%20}

  # Get game_id
  local twitchJson
  twitchJson=$(curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/helix/games?name=${gameName}")
  
  local -r gameID=$(jq -r ".data[0].id" <<< "${twitchJson}")

  # Get streamers
  twitchJson=$(curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/helix/streams?game_id=${gameID}")

  local streamerName=""
  streamerName=$(jq -r ".data[0].user_name" <<< "${twitchJson}")

  local streamTitle=""
  streamTitle=$(jq -r ".data[0].title" <<< "${twitchJson}")

  local viewers=""
  viewers=$(jq -r ".data[0].viewer_count" <<< "${twitchJson}")

  local streamTitleLength

  echo -e "\n $1 streamers:"

  local whileCounter=1;
  while [[ "${streamerName}" != "null" ]]; do
    # Truncate title if necessary
    streamTitleLength=${#streamTitle}

    if [[ "${streamTitleLength}" -gt 50 ]]; then
      streamTitle=$(echo "${streamTitle}" | cut -c 1-50)
      streamTitle="${streamTitle}…"
    fi

    echo -e "   ${TURQOISE}${streamerName}${NC}: ${streamTitle} ${ORANGE}(${viewers} viewers)${NC}"

    # Refresh data
    streamerName=$(jq -r ".data[${whileCounter}].user_name" <<< "${twitchJson}")
    streamTitle=$(jq -r ".data[${whileCounter}].title" <<< "${twitchJson}")
    viewers=$(jq -r ".data[${whileCounter}].viewer_count" <<< "${twitchJson}")
    whileCounter=$(( whileCounter + 1 ))
  done
}

#######################################
# Lists the top games on Twitch.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
list_top_games()
{
  echo -e "\n Top games:"
  
  local -r twitchJson=$(curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/helix/games/top")

  local gameName=""
  gameName=$(jq -r ".data[0].name" <<< "${twitchJson}")

  local whileCounter=1

  while [[ "${gameName}" != "null" ]]; do
    echo -e "   ${whileCounter}. ${TURQOISE}${gameName}${NC}"

    # Refresh data
    gameName=$(jq -r ".data[${whileCounter}].name" <<< "${twitchJson}")
    whileCounter=$(( whileCounter + 1 ))
  done
}

#######################################
# Loads user configuration from ~/.config/wtwitch/config.json.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
load_config()
{
  # Create config file if it doesnt exist
  if [[ ! -f "${CONFIG_FILE}" ]]; then
    mkdir "${CONFIG_FILE_DIRECTORY}"
    echo -e "{\"player\": \"gnome-mpv\",\"quality\": \"best\",\"subscriptions\": []}" > "${CONFIG_FILE}"
  fi

  # Player
  userPlayer=$(jq -r ".player" "${CONFIG_FILE}")

  # Quality
  userQuality=$(jq -r ".quality" "${CONFIG_FILE}")

  # Subscriptions
  local currentSubscription
  currentSubscription=$(jq -r ".subscriptions[0].streamer" "${CONFIG_FILE}")

  local whileCounter=1
  while [[ "${currentSubscription}" != "null" ]]; do
    userSubscriptions+=("${currentSubscription}")

    # Refresh data
    currentSubscription=$(jq -r ".subscriptions[${whileCounter}].streamer" "${CONFIG_FILE}")
    whileCounter=$(( whileCounter + 1 ))
  done
}

#######################################
# Prints information about how to use this script.
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
print_help()
{
  echo -e "\n ${GREEN}${SCRIPT_NAME}${NC} - browse and watch Twitch streams without being tracked."
  echo -e " Copyright (C) 2019 krathalan"
  echo -e " This is free software: you are free to change and redistribute it."
  echo -e " There is NO WARRANTY, to the extent permitted by law.\n"
  echo -e " Homepage: https://gitlab.com/krathalan/wtwitch\n"
  echo -e " Usage: bash ${SCRIPT_NAME} [OPTION] [ARG]\n"
  echo -e " Options:"

  print_help_helper "-h, --help" "show this help" "bash wtwitch -h"
  print_help_helper "-c, --check" "view which subscribed Twitch streams are online" "bash wtwitch -c"
  print_help_helper "-g [GAME], --get-streamers=[GAME]" "view the top streamers for a specified game" "bash wtwitch -g \"world of warcraft\""
  print_help_helper "-p [PLAYER], --change-player=[PLAYER]" "changes the default player in ~/.config/wtwitch/config.json that gets passed to Streamlink" "bash wtwitch -p gnome-mpv"
  print_help_helper "-q [QUALITY], --change-quality=[QUALITY]" "changes the default quality in ~/.config/wtwitch/config.json that gets passed to Streamlink" "bash wtwitch -q \"720p,480p\""
  print_help_helper "-s [STREAMER], --subscribe=[STREAMER]" "subscribes to a specific streamer" "bash wtwitch -s overwatchleague"
  print_help_helper "-t, --top-games" "lists the top games on twitch" "bash wtwitch -t"
  print_help_helper "-u [STREAMER], --unsubscribe=[STREAMER]" "unsubscribes from a specified streamer" "bash wtwitch -u overwatchleague"
}

#######################################
# Formats strings nicely for print_help().
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
print_help_helper()
{
  local -r description="Description: "${NC}
  local -r usage="Usage: "
  printf "   ${TURQOISE}%s${NC}\n     ${ORANGE}${description}${NC}%s\n     ${ORANGE}${usage}${NC}%s\n" "$1" "$2" "$3"
}

stream()
{
  # Check to make sure streamer is online 
  # Get current info of streamer
  local -r streamerJson=$(curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/kraken/streams/$1")

  local -r streamType=$(jq -r ".stream.stream_type" <<< "${streamerJson}")

  if [[ "${streamType}" == "null" ]]; then
    exit_script_on_failure "Streamer $1 is not online."
  fi

  {
    # Try
    streamlink --player-continuous-http -p "${userPlayer}" --twitch-disable-ads "https://www.twitch.tv/$1" "${userQuality}"
  } || {
    # Catch
    exit_script_on_failure "Streaming $1 failed.\n It's possible that $1's stream does not support quality ${userQuality}. Change default quality with wtwitch -q [QUALITY]."
  }
}

#######################################
# Subscribes to a specific streamer.
# Globals:
#   none
# Arguments:
#   $1: streamer to subscribe to
# Returns:
#   none
#######################################
subscribe()
{
  # Convert to lowercase
  local -r streamerToSubscribeTo="${1,,}"

  # Check to make sure user isn't already subscribed
  local -r subscriptionArrayLength=$(jq ".subscriptions | length" "${CONFIG_FILE}")

  if [[ ${subscriptionArrayLength} -gt 0 ]]; then
    local currentSubscription
    currentSubscription=$(jq -r ".subscriptions[0].streamer" "${CONFIG_FILE}")

    local whileCounter=1

    while [[ "${currentSubscription}" != "null" ]] && [[ "${currentSubscription}" != "${streamerToSubscribeTo}" ]]; do
      # Refresh data
      currentSubscription=$(jq -r ".subscriptions[$whileCounter].streamer" "${CONFIG_FILE}")
      whileCounter=$(( whileCounter + 1))
    done

    if [[ "${currentSubscription}" == "${streamerToSubscribeTo}" ]]; then
      exit_script_on_failure "You are already subscribed to ${streamerToSubscribeTo}."
    fi
  fi

  # Check to make sure streamer exists before subscribing
  local -r streamerJson=$(curl --silent -H "Client-ID: ${TWITCH_API_KEY}" -X GET "https://api.twitch.tv/kraken/channels/${streamerToSubscribeTo}")
  local -r streamerStatus=$(jq -r ".status" <<< "${streamerJson}")

  if [[ "${streamerStatus}" == "404" ]]; then
    exit_script_on_failure "Streamer ${streamerToSubscribeTo} does not exist."
  fi

  local -r tempJson=$(jq ".subscriptions[.subscriptions | length] |= . + {\"streamer\":\"$streamerToSubscribeTo\"}" "${CONFIG_FILE}")
  echo "${tempJson}" > "${CONFIG_FILE}"
  echo -e "\n ${CHECK_MARK} Successfully subscribed to ${streamerToSubscribeTo}."
}

#######################################
# Unsubscribes from a specific streamer.
# Globals:
#   none
# Arguments:
#   $1: streamer to unsubscribe from
# Returns:
#   none
#######################################
unsubscribe()
{
  # Convert to lowercase
  local -r streamerToUnsubscribeFrom="${1,,}"

  # Find index of streamer in .subscriptions[]
  local currentSubscription
  currentSubscription=$(jq -r ".subscriptions[0].streamer" "${CONFIG_FILE}")

  local whileCounter=1

  while [[ "${currentSubscription}" != "$streamerToUnsubscribeFrom" ]] && [[ "${currentSubscription}" != "null" ]]; do
    userSubscriptions+=("${currentSubscription}")

    # Refresh data
    currentSubscription=$(jq -r ".subscriptions[${whileCounter}].streamer" "${CONFIG_FILE}")
    whileCounter=$(( whileCounter + 1 ))
  done

  whileCounter=$(( whileCounter - 1 ))

  # Check to make sure user is subscribed before unsubscribing
  local -r subscriptionArrayLength=$(jq ".subscriptions | length" "${CONFIG_FILE}")

  if [[ ! $whileCounter -lt $subscriptionArrayLength ]]; then
    exit_script_on_failure "You weren't subscribed to ${streamerToUnsubscribeFrom} in the first place."
  fi

  local -r tempJson=$(jq "del(.subscriptions[${whileCounter}])" "${CONFIG_FILE}")
  echo "${tempJson}" > "${CONFIG_FILE}"
  echo -e "\n ${CHECK_MARK} Successfully unsubscribed from ${streamerToUnsubscribeFrom}."
}

# --------------------------------------
# --------------- Script ---------------
# --------------------------------------

check_command "streamlink"
check_command "jq"
load_config

# Parse flags. From:
# https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/7069755#7069755
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      print_help
      exit 0
      break
      ;;
    -c|--check)
      check_twitch_streams
      clean_up
      exit 0
      break
      ;;
    -g)
      shift
      if test $# -gt 0; then
        list_streamers_of_game "$1"
        exit 0
      else
        exit_script_on_failure "No game specified."
      fi
      break
      ;;
    --get-streamers*)
      shift
      if test $# -gt 0; then
        gameToCheck=$(echo "$1" | sed -e 's/^[^=]*=//g')
        list_streamers_of_game "${gameToCheck}"
      else
        exit_script_on_failure "No game specified."
      fi
      exit 0
      break
      ;;
    -p)
      shift
      if test $# -gt 0; then
        change_player "$1"
        exit 0
      else
        exit_script_on_failure "No media player specified."
      fi
      break
      ;;
    --change-player*)
      shift
      if test $# -gt 0; then
        player=$(echo "$1" | sed -e 's/^[^=]*=//g')
        change_player "${player}"
      else
        exit_script_on_failure "No media player specified."
      fi
      exit 0
      break
      ;;
    -q)
      shift
      if test $# -gt 0; then
        change_quality "$1"
        exit 0
      else
        exit_script_on_failure "No quality specified."
      fi
      break
      ;;
    --change-quality*)
      shift
      if test $# -gt 0; then
        quality=$(echo "$1" | sed -e 's/^[^=]*=//g')
        change_quality "${quality}"
      else
        exit_script_on_failure "No quality specified."
      fi
      exit 0
      break
      ;;
    -s)
      shift
      if test $# -gt 0; then
        subscribe "$1"
        exit 0
      else
        exit_script_on_failure "No streamer specified."
      fi
      break
      ;;
    --subscribe*)
      shift
      if test $# -gt 0; then
        streamerToSubscribeTo=$(echo "$1" | sed -e 's/^[^=]*=//g')
        subscribe "${streamerToSubscribeTo}"
      else
        exit_script_on_failure "No streamer specified."
      fi
      exit 0
      break
      ;;
    -t|--top-games)
      list_top_games
      exit 0
      break
      ;;
    -u)
      shift
      if test $# -gt 0; then
        unsubscribe "$1"
        exit 0
      else
        exit_script_on_failure "No streamer specified."
      fi
      break
      ;;
    --unsubscribe*)
      shift
      if test $# -gt 0; then
        streamerToUnsubscribeFrom=$(echo "$1" | sed -e 's/^[^=]*=//g')
        unsubscribe "${streamerToUnsubscribeFrom}"
      else
        exit_script_on_failure "No streamer specified."
      fi
      exit 0
      break
      ;;
    *)
      break
      ;;
  esac
done

if [[ ! -x "$(command -v "${userPlayer}")" ]]; then
  if [[ "${userPlayer}" == "gnome-mpv" ]] && [[ -x "$(command -v "vlc")" ]]; then
    echo -e "\n GNOME MPV not found. Using VLC instead..."
    userPlayer="vlc"
  else
    exit_script_on_failure "Media player ${userPlayer} not found. Change default media player with \"wtwitch -p [PLAYER]\"."
  fi
fi

stream "$1"